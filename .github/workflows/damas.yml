name: "damas"

on:
  issues:
    types: [opened]

jobs:
  move:
    runs-on: ubuntu-latest
    if: startsWith(github.event.issue.title, 'damas-') 
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - if: startsWith(github.event.issue.title, 'damas-') && contains(github.event.issue.labels.*.name, 'test')
        run: |
          echo "${{ github.event_name }}"
          exit 1

      - name: Set env vars
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
          echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
          echo "USER=${{ github.event.issue.user.login }}" >> $GITHUB_ENV
          echo "GITHUB_EVENT_ISSUE_TITLE=${{ github.event.issue.title }}" >> $GITHUB_ENV

      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Setup
        run: |
          pip install PyGithub pydraughts

      - name: Play
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ env.REPOSITORY }}
          ISSUE_NUMBER: ${{ env.ISSUE_NUMBER }}
          USER: ${{ env.USER }}
          GITHUB_EVENT_ISSUE_TITLE: ${{ env.GITHUB_EVENT_ISSUE_TITLE }}
        run: |
          python << 'EOF'
          from github import Github
          from draughts import Board, Move, svg, WHITE, BLACK
          from draughts.PDN import PDNReader, PDNWriter
          import os
          import base64

          try:
              TOKEN = os.environ["GITHUB_TOKEN"]
              REPO = os.environ["REPOSITORY"]
              USER = os.environ["USER"]
              ISSUE_NUMBER = os.environ["ISSUE_NUMBER"]
              DAMAS_GAME_TITLE = os.environ["GITHUB_EVENT_ISSUE_TITLE"]

              title_split = DAMAS_GAME_TITLE.split('-')
              DAMAS_GAME_NUM = title_split[3] if len(title_split) > 3 else ISSUE_NUMBER
              DAMAS_GAME_CMD = title_split[1] if len(title_split) > 1 else ""
              DAMAS_USER_MOVE = title_split[2] if len(title_split) > 2 else ""

              GAME_DATA_PATH = "damas_game/damas.pdn"
              TMP_FILE = "/tmp/damas.pdn"

              g = Github(TOKEN)
              repo = g.get_repo(REPO)

              try:
                  file_content = repo.get_contents(GAME_DATA_PATH)
                  game_content = base64.b64decode(file_content.content).decode("utf-8")
              except Exception as e:
                  print(f"Error fetching game data: {e}")
                  game_content = ""

              if DAMAS_GAME_CMD == "new":
                  try:
                      if game_content:
                          repo.delete_file(GAME_DATA_PATH, "Deleting game file", file_content.sha, branch="main")
                      game = Board(variant="brazilian")
                  except Exception as e:
                      print(f"Error creating a new game: {e}")

              if DAMAS_GAME_CMD == "move":
                  try:
                      with open(TMP_FILE, "w") as f:
                          f.write(game_content)
                      game = PDNReader(filename=TMP_FILE).games[0]
                      move = Move(game, pdn_move=DAMAS_USER_MOVE)
                      game.push(move)
                  except Exception as e:
                      print(f"Error processing move: {e}")

              # Verify situation of the game
              try:
                  if game.is_over():
                      winner = game.winner()
                      if winner == WHITE:
                          reaction = "+1"
                          new_comment_body = "White won the game!\n\n"
                      elif winner == 0:
                          reaction = "neutral"
                          new_comment_body = "Draw!\n\n"
                      elif winner == BLACK:
                          reaction = "-1"
                          new_comment_body = "Black won the game!\n\n"
                      message = "[new game](https://github.com/Igor0Pires/Igor0Pires/issues/new?title=damas-&body=descricao)"
              except Exception as e:
                  print(f"Error verifying game status: {e}")

              # Update README
              try:
                  with open(GAME_DATA_PATH, "w") as file:
                      file.write("")
                  game = PDNWriter(filename=GAME_DATA_PATH, board=game)

                  svg_content = svg.create_svg(game)
                  with open("assets/board.svg", "w") as file:
                      file.write(svg_content)

                  message = "[new game](https://github.com/Igor0Pires/Igor0Pires/issues/new?title=damas-new&body=)"
                  moves = game.legal_moves()
                  trad_moves = list(map(lambda x: x.board_move, moves))

                  for move in trad_moves:
                      message += f"\n- [{move}](https://github.com/Igor0Pires/Igor0Pires/issues/new?title=damas-move-{move}&body=)"

                  new_readme = f"""
                  ## Torneio de Damas (BETA) 
                  Não está funcionando (ainda...)

                  É a vez das brancas (listradas)

                  ![board](assets/board.svg)

                  {message}
                  """

                  current_readme = repo.get_contents('README.md')
                  path_readme = current_readme.path

                  repo.update_file('README.md', 'Update README', new_readme, current_readme.sha, branch='main')
              except Exception as e:
                  print(f"Error updating README: {e}")

          except KeyError as e:
              print(f"Environment variable missing: {e}")
          except Exception as e:
              print(f"Unexpected error: {e}")
          EOF

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          mkdir -p assets
          git add assets/board.svg README.md
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Update board.svg and README [skip ci]"
            git push origin main
          fi
